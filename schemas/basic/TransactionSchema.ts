import * as coda from '@codahq/packs-sdk';
import { PaymentDetailsSchema } from './PaymentDetailsSchema';
import { ExtendedAuthorizationAttributesSchema } from './ExtendedAuthorizationAttributesSchema';

export const TransactionSchema = coda.makeObjectSchema({
  properties: {
    transaction_id: {
      type: coda.ValueType.Number,
      fixedId: 'transaction_id',
      fromKey: 'id',
      useThousandsSeparator: false,
      description: 'The ID for the transaction.',
    },
    amount: {
      type: coda.ValueType.Number,
      codaType: coda.ValueHintType.Currency,
      description:
        "The amount of money included in the transaction. If you don't provide a value for `amount`, then it defaults to the total cost of the order (even if a previous transaction has been made towards it).",
    },
    authorization: {
      type: coda.ValueType.String,
      description: 'The authorization code associated with the transaction.',
    },
    authorization_expires_at: {
      type: coda.ValueType.String,
      description: 'The date and time when the Shopify Payments authorization expires.',
    },
    created_at: { type: coda.ValueType.String, description: 'The date and time when the transaction was created.' },
    currency: {
      type: coda.ValueType.String,
      description: 'The three-letter code (ISO 4217 format) for the currency used for the payment.',
    },
    device_id: { type: coda.ValueType.Number, useThousandsSeparator: false, description: 'The ID for the device.' },
    error_code: {
      type: coda.ValueType.String,
      description:
        'A standardized error code, independent of the payment provider. Valid values:\n- incorrect_number\n- invalid_number\n- invalid_expiry_date\n- invalid_cvc\n- expired_card\n- incorrect_cvc\n- incorrect_zip\n- incorrect_address\n- card_declined\n- processing_error\n- call_issuer\n- pick_up_card',
    },
    extended_authorization_attributes: {
      ...ExtendedAuthorizationAttributesSchema,
      fixedId: 'extended_authorization_attributes',
      fromKey: 'extended_authorization_attributes',
      description:
        'The attributes associated with a Shopify Payments extended authorization period. Available only if the following criteria applies:\n- The store is on a Shopify Plus plan.\n- The store uses Shopify Payments.\n- The transaction being retrieved is an extended authorization',
    },
    gateway: {
      type: coda.ValueType.String,
      fixedId: 'gateway',
      fromKey: 'gateway',
      description: 'The name of the gateway the transaction was issued through',
    },
    kind: {
      type: coda.ValueType.String,
      fixedId: 'kind',
      fromKey: 'kind',
      description:
        "The transaction's type. Valid values:\n- authorization: Money that the customer has agreed to pay. The authorization period can be between 7 and 30 days (depending on your payment service) while a store waits for a payment to be captured.\n- capture: A transfer of money that was reserved during the authorization of a shop.\n- sale: The authorization and capture of a payment performed in one single step.\n- void: The cancellation of a pending authorization or capture.\n- refund: The partial or full return of captured money to the customer.",
    },
    location_id: {
      type: coda.ValueType.Number,
      useThousandsSeparator: false,
      fixedId: 'location_id',
      fromKey: 'location_id',
      description: 'The ID of the physical location where the transaction was processed.',
    },
    message: {
      type: coda.ValueType.String,
      fixedId: 'message',
      fromKey: 'message',
      description:
        'A string generated by the payment provider with additional information about why the transaction succeeded or failed.',
    },
    order_id: {
      type: coda.ValueType.Number,
      useThousandsSeparator: false,
      fixedId: 'order_id',
      fromKey: 'order_id',
      description: 'The ID for the order that the transaction is associated with.',
    },
    payment_details: {
      ...PaymentDetailsSchema,
      fixedId: 'payment_details',
      fromKey: 'payment_details',
      description: 'payment_details.',
    },
    parent_id: {
      type: coda.ValueType.Number,
      useThousandsSeparator: false,
      fixedId: 'parent_id',
      fromKey: 'parent_id',
      description: 'The ID of an associated transaction.',
    },
    // payments_refund_attributes: {
    //   type: coda.ValueType.Number,
    //   useThousandsSeparator: false,
    //   fixedId: 'payments_refund_attributes',
    //   fromKey: 'payments_refund_attributes',
    //   description: 'The attributes associated with a Shopify Payments refund.',
    // },
    processed_at: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.DateTime,
      fixedId: 'processed_at',
      fromKey: 'processed_at',
      description: 'The date and time when a transaction was processed.',
    },
    // TODO: implement this
    /*
    receipt: {
      type: coda.ValueType.String,
      fixedId: 'receipt',
      fromKey: 'receipt',
      description:
        'A transaction receipt attached to the transaction by the gateway. The value of this field depends on which gateway the shop is using.',
    },
    */
    source_name: {
      type: coda.ValueType.String,
      fixedId: 'source_name',
      fromKey: 'source_name',
      description: 'The origin of the transaction.',
    },
    status: {
      type: coda.ValueType.String,
      fixedId: 'status',
      fromKey: 'status',
      description: 'The status of the transaction. Valid values:\n- pending\n- failure\n- success\n- error.',
    },
    // TODO: add this to format it from total_unsettled_set in a formatTransaction function
    total_unsettled: {
      type: coda.ValueType.Number,
      codaType: coda.ValueHintType.Currency,
      fixedId: 'total_unsettled',
      description:
        'Specifies the available amount to capture on the gateway in shop currency. Only available when an amount is capturable or manually mark as paid.',
    },
    /*
    total_unsettled_set: {
      ...PriceSetSchema,
      fixedId: 'total_unsettled_set',
      fromKey: 'total_unsettled_set',
      description:
        'Specifies the available amount with currency to capture on the gateway in shop and presentment currencies. Only available when an amount is capturable or manually mark as paid.',
    },
    */
    test: {
      type: coda.ValueType.Boolean,
      fixedId: 'test',
      fromKey: 'test',
      description: 'Whether the transaction is a test transaction.',
    },
    user_id: {
      type: coda.ValueType.Number,
      useThousandsSeparator: false,
      fixedId: 'user_id',
      fromKey: 'user_id',
      description:
        'The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.',
    },
    // ! Requires the header X-Shopify-Api-Features = include-currency-exchange-adjustments.
    /*
    currency_exchange_adjustment: {
      ...CurrencyExchangeAdjustmentSchema,
      fixedId: 'currency_exchange_adjustment',
      fromKey: 'currency_exchange_adjustment',
      description:
        'An adjustment on the transaction showing the amount lost or gained due to fluctuations in the currency exchange rate.',
    },
    */
  },
  displayProperty: 'transaction_id',
});
