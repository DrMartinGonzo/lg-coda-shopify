import * as coda from '@codahq/packs-sdk';

import { IDENTITY_DRAFT_ORDER, NOT_FOUND } from '../../constants';
import { CustomerReference } from './CustomerSchema';
import { FieldDependency } from '../../types/tableSync';
import { NameValueSchema } from '../basic/NameValueSchema';
import { TaxLineSchema } from '../basic/TaxLineSchema';
import { OrderLineItemSchema } from '../basic/OrderLineItemSchema';
import { AddressSchema } from '../basic/AddressSchema';
import { CompanySchema } from '../basic/CompanySchema';
import { DiscountApplicationSchema } from '../basic/DiscountApplicationSchema';
import { PaymentTermsSchema } from '../basic/PaymentTermsSchema';
import { ShippingLineSchema } from '../basic/ShippingLineSchema';
import { OrderReference } from './OrderSchema';

export const DraftOrderSyncTableSchema = coda.makeObjectSchema({
  properties: {
    admin_url: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.Url,
      fixedId: 'admin_url',
      description: 'A link to the draft order in the Shopify admin.',
    },
    applied_discount: {
      ...DiscountApplicationSchema,
      fixedId: 'applied_discount',
      fromKey: 'applied_discount',
      description:
        'The discount applied to the line item or the draft order resource. Each draft order resource can have one applied_discount resource and each draft order line item can have its own applied_discount.',
    },
    billing_address: {
      ...AddressSchema,
      fixedId: 'billing_address',
      fromKey: 'billing_address',
      description:
        "The mailing address associated with the payment method. This address is an optional field that won't be available on orders that do not require a payment method.",
    },
    completed_at: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.DateTime,
      fixedId: 'completed_at',
      fromKey: 'completed_at',
      description: 'The date and time when the order is created and the draft order is completed.',
    },
    created_at: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.DateTime,
      fixedId: 'created_at',
      fromKey: 'created_at',
      description: 'The autogenerated date and time when the order was created in Shopify. ',
    },
    currency: {
      type: coda.ValueType.String,
      fixedId: 'currency',
      fromKey: 'currency',
      description: 'The three-letter code (ISO 4217 format) for the shop currency.',
    },
    customer: {
      ...CustomerReference,
      fixedId: 'customer',
      fromKey: 'customer',
      description: 'Information about the customer.',
    },
    email: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.Email,
      fixedId: 'email',
      fromKey: 'email',
      mutable: true,
      description: "The customer's email address.",
    },
    graphql_gid: {
      type: coda.ValueType.String,
      fromKey: 'admin_graphql_api_id',
      fixedId: 'graphql_gid',
      description: 'The GraphQL GID of the draft order.',
    },
    id: {
      type: coda.ValueType.Number,
      required: true,
      fromKey: 'id',
      fixedId: 'id',
      useThousandsSeparator: false,
      description: 'The ID of the draft order.',
    },
    invoice_sent_at: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.DateTime,
      fixedId: 'invoice_sent_at',
      fromKey: 'invoice_sent_at',
      description: 'The date and time when the invoice was emailed to the customer.',
    },
    invoice_url: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.Url,
      fixedId: 'invoice_url',
      fromKey: 'invoice_url',
      description: 'The URL for the invoice.',
    },
    line_items: {
      type: coda.ValueType.Array,
      items: OrderLineItemSchema,
      fixedId: 'line_items',
      fromKey: 'line_items',
      description: 'The product variant line item or custom line item associated to the draft order.',
    },
    name: {
      type: coda.ValueType.String,
      required: true,
      fixedId: 'name',
      fromKey: 'name',
      description: 'Name of the draft order.',
    },
    note_attributes: {
      type: coda.ValueType.Array,
      items: NameValueSchema,
      fixedId: 'note_attributes',
      fromKey: 'note_attributes',
      description:
        'Extra information that is added to the order. Appears in the Additional details section of an order details page. Each array entry must contain a hash with name and value keys.',
    },
    note: {
      type: coda.ValueType.String,
      fixedId: 'note',
      fromKey: 'note',
      mutable: true,
      description: 'The text of an optional note that a merchant can attach to the draft order.',
    },
    order_id: {
      type: coda.ValueType.Number,
      fromKey: 'order_id',
      fixedId: 'order_id',
      useThousandsSeparator: false,
      description:
        "The ID of the order that's created and associated with the draft order after the draft order is completed",
    },
    order: {
      ...OrderReference,
      fromKey: 'order',
      fixedId: 'order',
      description:
        "A relation to the order that's created and associated with the draft order after the draft order is completed.",
    },
    payment_terms: {
      ...PaymentTermsSchema,
      fixedId: 'payment_terms',
      fromKey: 'payment_terms',
      description: 'The terms and conditions under which a payment should be processed.',
    },
    shipping_address: {
      ...AddressSchema,
      fixedId: 'shipping_address',
      fromKey: 'shipping_address',
      description:
        'The mailing address to where the order will be shipped. This address is optional and will not be available on orders that do not require shipping',
    },
    shipping_line: {
      ...ShippingLineSchema,
      fixedId: 'shipping_line',
      fromKey: 'shipping_line',
      description: 'The shipping method used.',
    },
    status: {
      type: coda.ValueType.String,
      fixedId: 'status',
      fromKey: 'status',
      description: 'Status of the draft order.',
    },
    subtotal_price: {
      type: coda.ValueType.Number,
      codaType: coda.ValueHintType.Currency,
      fixedId: 'subtotal_price',
      fromKey: 'subtotal_price',
      description:
        'The current subtotal price of the order in the shop currency. The value of this field reflects order edits, returns, and refunds.',
    },
    tags: {
      type: coda.ValueType.String,
      fixedId: 'tags',
      fromKey: 'tags',
      mutable: true,
      description:
        'Tags attached to the order, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length.',
    },
    tax_exempt: {
      type: coda.ValueType.Boolean,
      fixedId: 'tax_exempt',
      fromKey: 'tax_exempt',
      description:
        "Whether taxes are exempt for the draft order. If set to false, then Shopify refers to the taxable field for each line_item. If a customer is applied to the draft order, then Shopify uses the customer's tax_exempt field instead.",
    },
    tax_exemptions: {
      type: coda.ValueType.Array,
      items: { type: coda.ValueType.String },
      fixedId: 'tax_exemptions',
      fromKey: 'tax_exemptions',
      description: 'Whether the customer is exempt from paying specific taxes on their order. Canadian taxes only.',
    },
    tax_lines: {
      type: coda.ValueType.Array,
      items: TaxLineSchema,
      fixedId: 'tax_lines',
      fromKey: 'tax_lines',
      description: 'An array of tax line objects, each of which details a tax applicable to the order.',
    },
    taxes_included: {
      type: coda.ValueType.Boolean,
      fixedId: 'taxes_included',
      fromKey: 'taxes_included',
      description: 'Whether taxes are included in the order subtotal.',
    },
    total_price: {
      type: coda.ValueType.Number,
      codaType: coda.ValueHintType.Currency,
      fixedId: 'total_price',
      fromKey: 'total_price',
      description:
        'The current total price of the order in the shop currency. The value of this field reflects order edits, returns, and refunds.',
    },
    total_tax: {
      type: coda.ValueType.Number,
      codaType: coda.ValueHintType.Currency,
      fixedId: 'total_tax',
      fromKey: 'total_tax',
      description:
        'The current total taxes charged on the order in the shop currency. The value of this field reflects order edits, returns, or refunds.',
    },
    updated_at: {
      type: coda.ValueType.String,
      codaType: coda.ValueHintType.DateTime,
      fixedId: 'updated_at',
      fromKey: 'updated_at',
      description:
        'The date and time when the order was last modified. Filtering orders by updated_at is not an effective method for fetching orders because its value can change when no visible fields of an order have been updated.',
    },
  },

  displayProperty: 'name',
  idProperty: 'id',
  // admin_url will be the last featured property, added in Products dynamicOptions after the eventual metafields
  featuredProperties: [
    'name',
    'id',
    'status',
    'customer',
    'line_items',
    'total_price',
    'billing_address',
    'shipping_address',
    'created_at',
  ],

  // Card fields.
  subtitleProperties: ['status', 'customer', 'total_price', 'created_at'],
  snippetProperty: 'note',
  linkProperty: 'admin_url',
});
export const draftOrderFieldDependencies: FieldDependency<typeof DraftOrderSyncTableSchema.properties>[] = [
  //   {
  //   field: 'handle',
  //   dependencies: ['storeUrl'],
  // },
  {
    field: 'client_details',
    dependencies: ['browser_user_agent', 'browser_accept_language'],
  },
  {
    field: 'current_total_duties_set',
    dependencies: ['current_total_duties'],
  },
  {
    field: 'current_total_additional_fees_set',
    dependencies: ['current_total_additional_fees'],
  },
  {
    field: 'original_total_additional_fees_set',
    dependencies: ['original_total_additional_fees'],
  },
  {
    field: 'original_total_duties_set',
    dependencies: ['original_total_duties'],
  },
  {
    field: 'total_shipping_price_set',
    dependencies: ['total_shipping_price'],
  },
  {
    field: 'id',
    dependencies: ['admin_url'],
  },
];
export const DraftOrderReference = coda.makeReferenceSchemaFromObjectSchema(
  DraftOrderSyncTableSchema,
  IDENTITY_DRAFT_ORDER
);
export const formatDraftOrderReferenceValueForSchema = (id: number, name = NOT_FOUND) => ({ id, name });
